use super::utils::{ROL, load64, store64};

const NROUNDS: usize = 24;

const KeccakF_RoundConstants: [u64; NROUNDS] = [

    0x0000000000000001,
    0x0000000000008082,
    0x800000000000808a,
    0x8000000080008000,
    0x000000000000808b,
    0x0000000080000001,
    0x8000000080008081,
    0x8000000000008009,
    0x000000000000008a,
    0x0000000000000088,
    0x0000000080008009,
    0x000000008000000a,
    0x000000008000808b,
    0x800000000000008b,
    0x8000000000008089,
    0x8000000000008003,
    0x8000000000008002,
    0x8000000000000080,
    0x000000000000800a,
    0x800000008000000a,
    0x8000000080008081,
    0x8000000000008080,
    0x0000000080000001,
    0x8000000080008008,

];


fn KeccakF1600_StatePermute(state: &mut [u64]) {

    let (mut Aba, mut Abe, mut Abi, mut Abo, mut Abu): (u64, u64, u64, u64, u64);
    let (mut Aga, mut Age, mut Agi, mut Ago, mut Agu): (u64, u64, u64, u64, u64);
    let (mut Aka, mut Ake, mut Aki, mut Ako, mut Aku): (u64, u64, u64, u64, u64);
    let (mut Ama, mut Ame, mut Ami, mut Amo, mut Amu): (u64, u64, u64, u64, u64);
    let (mut Asa, mut Ase, mut Asi, mut Aso, mut Asu): (u64, u64, u64, u64, u64);
    let (mut BCa, mut BCe, mut BCi, mut BCo, mut BCu): (u64, u64, u64, u64, u64);
    let (mut Da, mut De, mut Di, mut Do, mut Du): (u64, u64, u64, u64, u64);
    let (mut Eba, mut Ebe, mut Ebi, mut Ebo, mut Ebu): (u64, u64, u64, u64, u64);
    let (mut Ega, mut Ege, mut Egi, mut Ego, mut Egu): (u64, u64, u64, u64, u64);
    let (mut Eka, mut Eke, mut Eki, mut Eko, mut Eku): (u64, u64, u64, u64, u64);
    let (mut Ema, mut Eme, mut Emi, mut Emo, mut Emu): (u64, u64, u64, u64, u64);
    let (mut Esa, mut Ese, mut Esi, mut Eso, mut Esu): (u64, u64, u64, u64, u64);

    //copyFromState(A, state)
    Aba = state[0];
    Abe = state[1];
    Abi = state[2];
    Abo = state[3];
    Abu = state[4];
    Aga = state[5];
    Age = state[6];
    Agi = state[7];
    Ago = state[8];
    Agu = state[9];
    Aka = state[10];
    Ake = state[11];
    Aki = state[12];
    Ako = state[13];
    Aku = state[14];
    Ama = state[15];
    Ame = state[16];
    Ami = state[17];
    Amo = state[18];
    Amu = state[19];
    Asa = state[20];
    Ase = state[21];
    Asi = state[22];
    Aso = state[23];
    Asu = state[24];

    for round in (0..NROUNDS).step_by(2) {

        //prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;

        //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
        De = BCa ^ ROL(BCi, 1);
        Di = BCe ^ ROL(BCo, 1);
        Do = BCi ^ ROL(BCu, 1);
        Du = BCo ^ ROL(BCa, 1);

        Aba ^= Da;
        BCa  = Aba;
        Age ^= De;
        BCe  = ROL(Age, 44);
        Aki ^= Di;
        BCi  = ROL(Aki, 43);
        Amo ^= Do;
        BCo  = ROL(Amo, 21);
        Asu ^= Du;
        BCu  = ROL(Asu, 14);
        Eba  = BCa ^ ((!BCe) & BCi);
        Eba ^= KeccakF_RoundConstants[round];
        Ebe  = BCe ^ ((!BCi) & BCo);
        Ebi  = BCi ^ ((!BCo) & BCu);
        Ebo  = BCo ^ ((!BCu) & BCa);
        Ebu  = BCu ^ ((!BCa) & BCe);

        Abo ^= Do;
        BCa  = ROL(Abo, 28);
        Agu ^= Du;
        BCe  = ROL(Agu, 20);
        Aka ^= Da;
        BCi  = ROL(Aka,  3);
        Ame ^= De;
        BCo  = ROL(Ame, 45);
        Asi ^= Di;
        BCu  = ROL(Asi, 61);
        Ega  = BCa ^ ((!BCe) & BCi);
        Ege  = BCe ^ ((!BCi) & BCo);
        Egi  = BCi ^ ((!BCo) & BCu);
        Ego  = BCo ^ ((!BCu) & BCa);
        Egu  = BCu ^ ((!BCa) & BCe);

        Abe ^= De;
        BCa  = ROL(Abe,  1);
        Agi ^= Di;
        BCe  = ROL(Agi,  6);
        Ako ^= Do;
        BCi  = ROL(Ako, 25);
        Amu ^= Du;
        BCo  = ROL(Amu,  8);
        Asa ^= Da;
        BCu  = ROL(Asa, 18);
        Eka  = BCa ^ ((!BCe) & BCi);
        Eke  = BCe ^ ((!BCi) & BCo);
        Eki  = BCi ^ ((!BCo) & BCu);
        Eko  = BCo ^ ((!BCu) & BCa);
        Eku  = BCu ^ ((!BCa) & BCe);

        Abu ^= Du;
        BCa  = ROL(Abu, 27);
        Aga ^= Da;
        BCe  = ROL(Aga, 36);
        Ake ^= De;
        BCi  = ROL(Ake, 10);
        Ami ^= Di;
        BCo  = ROL(Ami, 15);
        Aso ^= Do;
        BCu  = ROL(Aso, 56);
        Ema  = BCa ^ ((!BCe) & BCi);
        Eme  = BCe ^ ((!BCi) & BCo);
        Emi  = BCi ^ ((!BCo) & BCu);
        Emo  = BCo ^ ((!BCu) & BCa);
        Emu  = BCu ^ ((!BCa) & BCe);

        Abi ^= Di;
        BCa  = ROL(Abi, 62);
        Ago ^= Do;
        BCe  = ROL(Ago, 55);
        Aku ^= Du;
        BCi  = ROL(Aku, 39);
        Ama ^= Da;
        BCo  = ROL(Ama, 41);
        Ase ^= De;
        BCu  = ROL(Ase,  2);
        Esa  = BCa ^ ((!BCe) & BCi);
        Ese  = BCe ^ ((!BCi) & BCo);
        Esi  = BCi ^ ((!BCo) & BCu);
        Eso  = BCo ^ ((!BCu) & BCa);
        Esu  = BCu ^ ((!BCa) & BCe);

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;

        //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
        De = BCa ^ ROL(BCi, 1);
        Di = BCe ^ ROL(BCo, 1);
        Do = BCi ^ ROL(BCu, 1);
        Du = BCo ^ ROL(BCa, 1);

        Eba ^= Da;
        BCa  = Eba;
        Ege ^= De;
        BCe  = ROL(Ege, 44);
        Eki ^= Di;
        BCi  = ROL(Eki, 43);
        Emo ^= Do;
        BCo  = ROL(Emo, 21);
        Esu ^= Du;
        BCu  = ROL(Esu, 14);
        Aba  = BCa ^ ((!BCe) & BCi);
        Aba ^= KeccakF_RoundConstants[round + 1];
        Abe  = BCe ^ ((!BCi) & BCo);
        Abi  = BCi ^ ((!BCo) & BCu);
        Abo  = BCo ^ ((!BCu) & BCa);
        Abu  = BCu ^ ((!BCa) & BCe);

        Ebo ^= Do;
        BCa  = ROL(Ebo, 28);
        Egu ^= Du;
        BCe  = ROL(Egu, 20);
        Eka ^= Da;
        BCi  = ROL(Eka, 3);
        Eme ^= De;
        BCo  = ROL(Eme, 45);
        Esi ^= Di;
        BCu  = ROL(Esi, 61);
        Aga  = BCa ^ ((!BCe) & BCi);
        Age  = BCe ^ ((!BCi) & BCo);
        Agi  = BCi ^ ((!BCo) & BCu);
        Ago  = BCo ^ ((!BCu) & BCa);
        Agu  = BCu ^ ((!BCa) & BCe);

        Ebe ^= De;
        BCa  = ROL(Ebe, 1);
        Egi ^= Di;
        BCe  = ROL(Egi, 6);
        Eko ^= Do;
        BCi  = ROL(Eko, 25);
        Emu ^= Du;
        BCo  = ROL(Emu, 8);
        Esa ^= Da;
        BCu  = ROL(Esa, 18);
        Aka  = BCa ^ ((!BCe) & BCi);
        Ake  = BCe ^ ((!BCi) & BCo);
        Aki  = BCi ^ ((!BCo) & BCu);
        Ako  = BCo ^ ((!BCu) & BCa);
        Aku  = BCu ^ ((!BCa) & BCe);

        Ebu ^= Du;
        BCa  = ROL(Ebu, 27);
        Ega ^= Da;
        BCe  = ROL(Ega, 36);
        Eke ^= De;
        BCi  = ROL(Eke, 10);
        Emi ^= Di;
        BCo  = ROL(Emi, 15);
        Eso ^= Do;
        BCu  = ROL(Eso, 56);
        Ama  = BCa ^ ((!BCe) & BCi);
        Ame  = BCe ^ ((!BCi) & BCo);
        Ami  = BCi ^ ((!BCo) & BCu);
        Amo  = BCo ^ ((!BCu) & BCa);
        Amu  = BCu ^ ((!BCa) & BCe);

        Ebi ^= Di;
        BCa  = ROL(Ebi, 62);
        Ego ^= Do;
        BCe  = ROL(Ego, 55);
        Eku ^= Du;
        BCi  = ROL(Eku, 39);
        Ema ^= Da;
        BCo  = ROL(Ema, 41);
        Ese ^= De;
        BCu  = ROL(Ese, 2);
        Asa  = BCa ^ ((!BCe) & BCi);
        Ase  = BCe ^ ((!BCi) & BCo);
        Asi  = BCi ^ ((!BCo) & BCu);
        Aso  = BCo ^ ((!BCu) & BCa);
        Asu  = BCu ^ ((!BCa) & BCe);
    }

    //copyToState(state, A)
    state[0]  = Aba;
    state[1]  = Abe;
    state[2]  = Abi;
    state[3]  = Abo;
    state[4]  = Abu;
    state[5]  = Aga;
    state[6]  = Age;
    state[7]  = Agi;
    state[8]  = Ago;
    state[9]  = Agu;
    state[10] = Aka;
    state[11] = Ake;
    state[12] = Aki;
    state[13] = Ako;
    state[14] = Aku;
    state[15] = Ama;
    state[16] = Ame;
    state[17] = Ami;
    state[18] = Amo;
    state[19] = Amu;
    state[20] = Asa;
    state[21] = Ase;
    state[22] = Asi;
    state[23] = Aso;
    state[24] = Asu;
}


pub fn keccak_absorb(s: &mut [u64; 25], rate: usize, m: &[u8], mlen: &mut usize, p: u8) {
    let mut t = [0u8; 200];
    let mut index: usize = 0;

    while *mlen >= rate {
        for i in 0..rate / 8 {
            s[i] ^= load64(&m[(index + 8 * i)..]);
        }
        KeccakF1600_StatePermute(s);
        index += rate;
        *mlen -= rate;
    }

    for i in 0..*mlen {
        t[i] = m[index + i];
    }

    t[*mlen] = p;
    t[(rate - 1)] |= 128;

    for i in 0..(rate / 8) {
        s[i] ^= load64(&t[(8 * i)..]);
    }
}


pub fn keccak_squeezeblocks(h: &mut [u8], nr_blocks: &mut usize, s: &mut [u64], rate: usize) {
    let mut index: usize = 0;
    while *nr_blocks > 0 {
        KeccakF1600_StatePermute(s);
        for i in 0..(rate >> 3) {
            let mut aux = s[i];
            store64(&mut h[index + 8 * i..], &mut aux);
        }
        index += rate;
        *nr_blocks -= 1;
    }
}


#[cfg(test)]
mod tests {

    use std::collections::HashMap;
    use super::*;

    #[test]
    fn test_KeccakF1600_StatePermute() {

        let mut parametrization: HashMap<[u64; 25], [u64; 25]> = HashMap::new();

        parametrization.insert(
            [
                0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288
            ],
            [ 3536633773854252697, 9717938292368247294, 18438606660496393963, 2272567565380773691, 9604243602041941360, 11611794449774481712, 1195154909068268487, 2285873065807636339, 8884247391375714379, 13599871796537357299, 18231931096250116065, 15619048337451722889, 10021104478179581796, 3521851882233386997, 8887666142360034504, 2027701986179369021, 12000779699121156671, 12104784541270914002, 12624710980032474676, 10477321236278691924, 6367849604712017966, 15315050960896400650, 1074950816053363881, 13837442573296458731, 15786214695370014370
            ]);

            parametrization.insert(
                [
                    0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288
                ],
                [
                    3536633773854252697, 9717938292368247294, 18438606660496393963, 2272567565380773691, 9604243602041941360, 11611794449774481712, 1195154909068268487, 2285873065807636339, 8884247391375714379, 13599871796537357299, 18231931096250116065, 15619048337451722889, 10021104478179581796, 3521851882233386997, 8887666142360034504, 2027701986179369021, 12000779699121156671, 12104784541270914002, 12624710980032474676, 10477321236278691924, 6367849604712017966, 15315050960896400650, 1074950816053363881, 13837442573296458731, 15786214695370014370
                ]);

            parametrization.insert(
                [
                    10, 22, 34, 46, 58, 70, 82, 94, 106, 118, 130, 142, 154, 166, 178, 190, 202, 214, 226, 238, 250, 262, 274, 286, 298
                ],
                [
                    17162501415339620324, 14761317266587795089, 1535776152737773299, 9240928432588123581, 5197006921113767641, 604853478278885844, 17996843280135490262, 818457991630270734, 15533619140851251392, 12336718515856163691, 1468021336396279958, 4570262217997757033, 1420703802615264817, 11453102675847495142, 2107673290758174247, 14510207708678211317, 10083692048056286720, 6729495606653929979, 11228028975894383504, 1829730467209742825, 14152822276476192261, 5960815785237931445, 2586807309144063193, 17329128608388125133, 16579831448343321641
                ]);

            parametrization.insert(
                [
                    20, 32, 44, 56, 68, 80, 92, 104, 116, 128, 140, 152, 164, 176, 188, 200, 212, 224, 236, 248, 260, 272, 284, 296, 308
                ],
                [
                    7443356639994493403, 10199036062195674842, 13175254918480787848, 5383922642782675782, 5270974365025252763, 1034321709859470159, 11283793727914196801, 17223123850570493821, 12782125938445967594, 17619185972126622911, 4285934095308770486, 9054566625826201784, 1750551490015954696, 10914770387586333716, 15557819937707788094, 17946167518896729709, 1976248091998398924, 7790221762150115550, 6781883431342795079, 15412698513400532955, 13998680107965085831, 12153818588133086175, 2694389503183156423, 7780378214948191137, 18308510415105754549
                ]);

            parametrization.insert(
                [
                    30, 42, 54, 66, 78, 90, 102, 114, 126, 138, 150, 162, 174, 186, 198, 210, 222, 234, 246, 258, 270, 282, 294, 306, 318
                ],
                [
                    9868598029778683773, 14067825651696927648, 4112811974569801021, 12607441877099749474, 8189945616000175387, 442502532935518652, 2530303770299405022, 11797798028060736394, 15296446506981099520, 3719428725366393815, 16023617695436656749, 2933611767769646085, 1581696442980066924, 7646769828196908625, 2498783021719014994, 82589418840018931, 13817191685318656339, 12913518965798224955, 12264755606372203955, 11870992069156539209, 5281050092820474829, 10018372844382741749, 5488942531461048020, 16090772592829597895, 8525620042320545491
                ]);

            parametrization.insert(
                [
                    40, 52, 64, 76, 88, 100, 112, 124, 136, 148, 160, 172, 184, 196, 208, 220, 232, 244, 256, 268, 280, 292, 304, 316, 328
                ],
                [
                    5575263970506825950, 4716515811781826340, 14307209125775504012, 10309591795941863242, 17140470609228872379, 12856417887633487625, 13897106893960457195, 10469318512970555803, 14127642289982423974, 229737034345406581, 11179230615703269671, 1994221509953270099, 3774370254595388595, 10319923883202494312, 13023689792269405431, 6484519399541678154, 277449769083252856, 4117973347404336525, 8303614856184290412, 657068744204113550, 17165123708240577696, 15932734092927027059, 7721724454265898975, 7440647117263890876, 4351922668752285877
                ]);

            parametrization.insert(
                [
                    50, 62, 74, 86, 98, 110, 122, 134, 146, 158, 170, 182, 194, 206, 218, 230, 242, 254, 266, 278, 290, 302, 314, 326, 338
                ],
                [
                    13125009861888054049, 1193038915303668189, 710633415952570190, 15800850978306427315, 17362691352629222207, 2942743712263005388, 6477221686280773508, 13548411421728619960, 16115555691641986932, 179957427297843030, 15332770194430568790, 10310896311061126312, 2680119423242944865, 8919801821612637632, 16264243514481100182, 3667932983883153089, 11478467248264915904, 8213345910568023742, 18145525977419957688, 1632294543991828090, 8233003348338936028, 11683981333319811089, 12948383672706178054, 9722669915142024246, 4929333126626998683
                ]);

            parametrization.insert(
                [
                    60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348
                ],
                [
                    8631654235137893714, 147364016404121103, 12573332205377387426, 9486221700427717730, 5449056046254933304, 7221350757363692716, 14030503423812149367, 7638214005344475311, 8539342514084293600, 13795469742306321334, 3285677605519006668, 15758451842706050114, 10927402760696404812, 8073724345889395590, 13884512985553391786, 924237436787799930, 13308440824517219043, 4779710127930140655, 3461484267842364324, 1789543682179326579, 2461426375855554910, 4988689320711993081, 10035659846272589781, 13370992499308043290, 1150199228784367417
                ]);

            parametrization.insert(
                [
                    70, 82, 94, 106, 118, 130, 142, 154, 166, 178, 190, 202, 214, 226, 238, 250, 262, 274, 286, 298, 310, 322, 334, 346, 358
                ],
                [
                    9965634763999494657, 7538524221531630411, 11436065080583489233, 18131652837436956712, 5249762204936455725, 2782825583408593361, 13516898407062653794, 14512994927925729758, 9363245730480767057, 3939664031104213201, 1101703406538247879, 9262890924294304193, 707271704107454868, 17181459102760568856, 16109328431447489777, 1321020721868397634, 3680059936057155597, 12049889757855054303, 3429099846781806390, 6821140792098458848, 17313407062095431465, 14350107066994926074, 8504201625101314412, 5983612163309329173, 3748724458698075225
                ]);

            parametrization.insert(
                [
                    80, 92, 104, 116, 128, 140, 152, 164, 176, 188, 200, 212, 224, 236, 248, 260, 272, 284, 296, 308, 320, 332, 344, 356, 368
                ],
                [
                    7698743883742819389, 6656377657842259279, 1880600558274625495, 11920545498841137958, 8054222249187758198, 11038877719612530076, 10098378091555532461, 14120929154001233467, 13099411475214819938, 4963971671826735167, 14278880753459709420, 7540226974011546381, 7492326451889264115, 2636189713286091413, 17391717775800877523, 10673516799699032688, 10402405911861647376, 17851328605271269297, 939653392460401425, 979803388555294141, 6933455475749757538, 162300967398182488, 5255105455076294388, 18134221651191287766, 851850210978374032
                ]);

            parametrization.insert(
                [
                    90, 102, 114, 126, 138, 150, 162, 174, 186, 198, 210, 222, 234, 246, 258, 270, 282, 294, 306, 318, 330, 342, 354, 366, 378
                ],
                [
                    13062323909569436501, 3432312956636601066, 8388107130445809927, 18334573207629572845, 15078209282224386833, 13915033209933963678, 810937968727553434, 17582289212975743445, 9083574378992691762, 17904932456058492783, 3167720197460190062, 10970862294304517056, 9684645173999422821, 13886629553004519356, 15002244532428935204, 1899757409932194323, 8337479669395143362, 18149233236446832779, 4234502649722102693, 5495349614762591352, 6881681711448476771, 16153664038487892434, 18411455688633238847, 14621476330921805989, 3126137467241070828
                ]);

        for (state, expected) in parametrization {
            let mut input: [u64; 25] = [0; 25];
            input.copy_from_slice(&state);
            KeccakF1600_StatePermute(&mut input);
            assert_eq!(input, expected);
        }
    }

    #[test]
    fn test_keccak_absorb() {

        let mut parametrization: HashMap<(usize, &[u8], usize, u8), [u64; 25]> = HashMap::new();

        parametrization.insert(
            (
                136,
                &[97, 98, 99, 100, 101, 102, 103],
                7,
                0x1F,
            ),
            [2262889923438928481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        parametrization.insert(
            (
                168,
                &[97, 98, 99, 100, 101, 102, 103],
                7,
                0x1F,
            ),
            [2262889923438928481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9223372036854775808, 0, 0, 0, 0]
        );
        parametrization.insert(
            (
                136,
                &[97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
                549,
                0x1F,
            ),
            [15968996218768922238, 1384903985385114594, 1329116000928956579, 17985356317648405025, 8693410834977884263, 1253005186093383326, 7129895516320220894, 9729868920402497152, 14187546481079992766, 6751039714299358667, 13130666383972988874, 12196103944563203439, 2427650906403999480, 18000234613465557642, 4734956323105206174, 10305744706350260751, 7365356855058111815, 12025721654135597813, 15759971364741894899, 5234669810123050490, 5305192724549801965, 2765494798892715237, 16965340562468365191, 11476246589639166208, 8671428764033673541]
        );
        parametrization.insert(
            (
                168,
                &[97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
                549,
                0x1F,
            ),
            [3882976890688627436, 10155622456643428885, 6032523288748945952, 10583974558925670078, 14041625359423945373, 12225727403413820907, 1476443619443782748, 5198258063891000066, 15486014190022595047, 18394378620237164093, 10346312083082964930, 284257982388200673, 5367860617570728604, 3085784564259742761, 13088297996309388928, 7040071194162674676, 17136122757004298548, 12901264663934475322, 11704497082197439502, 11857288919511444674, 6534245034151397003, 1848965698710920237, 16911560861360503366, 12100612790309193670, 7316859684225725354, ]
        );
        for ((rate, m, _mlen, p), expected) in parametrization {
            let mut s: [u64; 25] = [0; 25];
            let mut mlen: usize = _mlen;
            keccak_absorb(&mut s, rate, &m, &mut mlen, p);
            assert_eq!(s, expected);
        }
    }

    #[test]
    fn test_keccak_squeezeblocks() {

        let mut parametrization: HashMap<(usize, usize), &[u8]> = HashMap::new();

        parametrization.insert(
            (
                168,
                1
            ),
            &[231, 221, 225, 64, 121, 143, 37, 241, 138, 71, 192, 51, 249, 204, 213, 132, 238, 169, 90, 166, 30, 38, 152, 213, 77, 73, 128, 111, 48, 71, 21, 189, 87, 208, 83, 98, 5, 78, 40, 139, 212, 111, 142, 127, 45, 164, 151, 255, 196, 71, 70, 164, 160, 229, 254, 144, 118, 46, 25, 214, 12, 218, 91, 140, 156, 5, 25, 27, 247, 166, 48, 173, 100, 252, 143, 208, 183, 90, 147, 48, 53, 214, 23, 35, 63, 169, 90, 235, 3, 33, 113, 13, 38, 230, 166, 169, 95, 85, 207, 219, 22, 124, 165, 129, 38, 200, 71, 3, 205, 49, 184, 67, 159, 86, 165, 17, 26, 47, 242, 1, 97, 174, 217, 33, 90, 99, 229, 5, 242, 112, 201, 140, 242, 254, 190, 100, 17, 102, 196, 123, 149, 112, 54, 97, 203, 14, 208, 79, 85, 90, 124, 184, 200, 50, 207, 28, 138, 232, 62, 140, 20, 38, 58, 174, 34, 121, 12, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        );
        parametrization.insert(
            (
                168,
                5
            ),
            &[231, 221, 225, 64, 121, 143, 37, 241, 138, 71, 192, 51, 249, 204, 213, 132, 238, 169, 90, 166, 30, 38, 152, 213, 77, 73, 128, 111, 48, 71, 21, 189, 87, 208, 83, 98, 5, 78, 40, 139, 212, 111, 142, 127, 45, 164, 151, 255, 196, 71, 70, 164, 160, 229, 254, 144, 118, 46, 25, 214, 12, 218, 91, 140, 156, 5, 25, 27, 247, 166, 48, 173, 100, 252, 143, 208, 183, 90, 147, 48, 53, 214, 23, 35, 63, 169, 90, 235, 3, 33, 113, 13, 38, 230, 166, 169, 95, 85, 207, 219, 22, 124, 165, 129, 38, 200, 71, 3, 205, 49, 184, 67, 159, 86, 165, 17, 26, 47, 242, 1, 97, 174, 217, 33, 90, 99, 229, 5, 242, 112, 201, 140, 242, 254, 190, 100, 17, 102, 196, 123, 149, 112, 54, 97, 203, 14, 208, 79, 85, 90, 124, 184, 200, 50, 207, 28, 138, 232, 62, 140, 20, 38, 58, 174, 34, 121, 12, 148, 60, 203, 110, 249, 77, 149, 92, 45, 109, 181, 87, 112, 208, 44, 51, 106, 108, 107, 215, 112, 18, 141, 61, 9, 148, 208, 105, 85, 178, 217, 32, 138, 86, 241, 231, 229, 153, 79, 156, 79, 56, 251, 101, 218, 162, 185, 87, 249, 13, 175, 117, 18, 174, 61, 119, 133, 247, 16, 216, 195, 71, 242, 244, 250, 89, 135, 154, 247, 230, 158, 27, 31, 37, 180, 152, 238, 15, 204, 254, 228, 161, 104, 206, 185, 182, 97, 206, 104, 79, 151, 143, 186, 196, 102, 234, 222, 245, 177, 175, 110, 131, 61, 196, 51, 217, 219, 25, 39, 4, 84, 6, 224, 101, 18, 131, 9, 240, 169, 248, 124, 67, 71, 23, 191, 166, 73, 84, 253, 64, 75, 153, 216, 51, 173, 221, 151, 116, 231, 11, 93, 252, 213, 234, 72, 60, 176, 183, 85, 238, 200, 184, 227, 233, 66, 158, 100, 110, 34, 160, 145, 123, 221, 186, 231, 41, 49, 14, 144, 70, 54, 125, 118, 128, 187, 234, 85, 206, 186, 28, 208, 200, 84, 195, 134, 61, 155, 151, 176, 84, 210, 82, 148, 22, 111, 198, 226, 43, 66, 89, 222, 46, 33, 216, 212, 242, 228, 96, 198, 179, 155, 99, 27, 105, 79, 65, 120, 129, 227, 34, 27, 159, 15, 178, 203, 63, 166, 45, 172, 95, 218, 22, 207, 124, 95, 217, 82, 101, 183, 192, 131, 21, 126, 1, 175, 78, 200, 239, 68, 149, 44, 83, 62, 255, 128, 211, 72, 5, 47, 224, 197, 197, 110, 67, 146, 233, 231, 141, 238, 161, 124, 229, 189, 176, 209, 31, 138, 70, 112, 9, 36, 134, 118, 187, 156, 67, 120, 169, 18, 77, 139, 255, 206, 252, 89, 107, 210, 248, 255, 16, 33, 71, 15, 170, 210, 81, 37, 247, 83, 191, 74, 212, 123, 183, 11, 208, 34, 183, 210, 90, 225, 69, 44, 121, 44, 147, 149, 96, 197, 156, 167, 211, 106, 118, 209, 2, 158, 46, 235, 166, 64, 95, 42, 124, 58, 120, 69, 220, 65, 41, 161, 101, 109, 84, 196, 68, 87, 83, 220, 31, 66, 128, 190, 4, 113, 87, 98, 211, 215, 244, 81, 35, 100, 219, 217, 96, 39, 189, 71, 238, 123, 82, 114, 62, 238, 44, 200, 162, 82, 187, 40, 56, 205, 13, 221, 247, 161, 160, 232, 198, 119, 6, 51, 13, 146, 217, 16, 4, 178, 52, 238, 170, 216, 203, 241, 250, 9, 79, 87, 82, 66, 65, 181, 8, 105, 82, 120, 72, 227, 149, 180, 196, 77, 200, 171, 151, 229, 8, 179, 200, 87, 255, 100, 110, 210, 23, 202, 209, 207, 136, 200, 236, 181, 198, 43, 149, 224, 160, 43, 9, 122, 158, 109, 198, 65, 35, 134, 249, 138, 240, 112, 12, 142, 167, 173, 241, 109, 11, 99, 7, 95, 59, 52, 97, 223, 45, 227, 18, 243, 238, 39, 206, 111, 210, 147, 16, 93, 224, 170, 178, 21, 2, 100, 15, 219, 49, 102, 28, 39, 255, 9, 243, 201, 180, 65, 88, 130, 179, 200, 129, 146, 196, 20, 202, 40, 25, 203, 25, 34, 26, 40, 64, 225, 42, 29, 13, 245, 52, 105, 91, 152, 104, 58, 163, 240, 246, 41, 4, 80, 103, 151, 167, 216, 175, 127, 118, 240, 255, 168, 85, 190, 168, 215, 169, 204, 48, 149, 42, 188, 81, 184, 129, 188, 222, 71, 121, 126, 168, 82, 160, 10, 180, 41, 36, 119, 101, 99, 232, 156, 231, 145, 248, 88, 15, 134, 248, 173, 44, 21, 16, 49, 8, 45, 162, 189, 40, 6, 111, 127, 10, 204, 147, 66, 219, 180, 159, 168, 190, 9, 171, 136, 102, 202, 11, 57, 75, 206, 237, 187, 139, 187, 220, 250, 115, 74, 12, 70, 136, 163, 120, 45, 174, 169, 110, 192, 146, 241, 146, 230, 240, 131, 0, 159, 217, 224, 157, 144, 97, 210, 233, 199, 205, 63, 119, 118, 83, 200, 2, 157, 174, 0, 77, 52]
        );
        parametrization.insert(
            (
                136,
                1
            ),
            &[231, 221, 225, 64, 121, 143, 37, 241, 138, 71, 192, 51, 249, 204, 213, 132, 238, 169, 90, 166, 30, 38, 152, 213, 77, 73, 128, 111, 48, 71, 21, 189, 87, 208, 83, 98, 5, 78, 40, 139, 212, 111, 142, 127, 45, 164, 151, 255, 196, 71, 70, 164, 160, 229, 254, 144, 118, 46, 25, 214, 12, 218, 91, 140, 156, 5, 25, 27, 247, 166, 48, 173, 100, 252, 143, 208, 183, 90, 147, 48, 53, 214, 23, 35, 63, 169, 90, 235, 3, 33, 113, 13, 38, 230, 166, 169, 95, 85, 207, 219, 22, 124, 165, 129, 38, 200, 71, 3, 205, 49, 184, 67, 159, 86, 165, 17, 26, 47, 242, 1, 97, 174, 217, 33, 90, 99, 229, 5, 242, 112, 201, 140, 242, 254, 190, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
        );
        parametrization.insert(
            (
                136,
                5
            ),
            &[231, 221, 225, 64, 121, 143, 37, 241, 138, 71, 192, 51, 249, 204, 213, 132, 238, 169, 90, 166, 30, 38, 152, 213, 77, 73, 128, 111, 48, 71, 21, 189, 87, 208, 83, 98, 5, 78, 40, 139, 212, 111, 142, 127, 45, 164, 151, 255, 196, 71, 70, 164, 160, 229, 254, 144, 118, 46, 25, 214, 12, 218, 91, 140, 156, 5, 25, 27, 247, 166, 48, 173, 100, 252, 143, 208, 183, 90, 147, 48, 53, 214, 23, 35, 63, 169, 90, 235, 3, 33, 113, 13, 38, 230, 166, 169, 95, 85, 207, 219, 22, 124, 165, 129, 38, 200, 71, 3, 205, 49, 184, 67, 159, 86, 165, 17, 26, 47, 242, 1, 97, 174, 217, 33, 90, 99, 229, 5, 242, 112, 201, 140, 242, 254, 190, 100, 60, 203, 110, 249, 77, 149, 92, 45, 109, 181, 87, 112, 208, 44, 51, 106, 108, 107, 215, 112, 18, 141, 61, 9, 148, 208, 105, 85, 178, 217, 32, 138, 86, 241, 231, 229, 153, 79, 156, 79, 56, 251, 101, 218, 162, 185, 87, 249, 13, 175, 117, 18, 174, 61, 119, 133, 247, 16, 216, 195, 71, 242, 244, 250, 89, 135, 154, 247, 230, 158, 27, 31, 37, 180, 152, 238, 15, 204, 254, 228, 161, 104, 206, 185, 182, 97, 206, 104, 79, 151, 143, 186, 196, 102, 234, 222, 245, 177, 175, 110, 131, 61, 196, 51, 217, 219, 25, 39, 4, 84, 6, 224, 101, 18, 131, 9, 240, 169, 248, 124, 67, 71, 23, 191, 166, 73, 84, 253, 64, 75, 153, 216, 51, 173, 221, 151, 70, 54, 125, 118, 128, 187, 234, 85, 206, 186, 28, 208, 200, 84, 195, 134, 61, 155, 151, 176, 84, 210, 82, 148, 22, 111, 198, 226, 43, 66, 89, 222, 46, 33, 216, 212, 242, 228, 96, 198, 179, 155, 99, 27, 105, 79, 65, 120, 129, 227, 34, 27, 159, 15, 178, 203, 63, 166, 45, 172, 95, 218, 22, 207, 124, 95, 217, 82, 101, 183, 192, 131, 21, 126, 1, 175, 78, 200, 239, 68, 149, 44, 83, 62, 255, 128, 211, 72, 5, 47, 224, 197, 197, 110, 67, 146, 233, 231, 141, 238, 161, 124, 229, 189, 176, 209, 31, 138, 70, 112, 9, 36, 134, 118, 187, 156, 67, 120, 169, 18, 77, 139, 255, 206, 252, 89, 107, 210, 248, 255, 16, 33, 71, 15, 170, 210, 46, 235, 166, 64, 95, 42, 124, 58, 120, 69, 220, 65, 41, 161, 101, 109, 84, 196, 68, 87, 83, 220, 31, 66, 128, 190, 4, 113, 87, 98, 211, 215, 244, 81, 35, 100, 219, 217, 96, 39, 189, 71, 238, 123, 82, 114, 62, 238, 44, 200, 162, 82, 187, 40, 56, 205, 13, 221, 247, 161, 160, 232, 198, 119, 6, 51, 13, 146, 217, 16, 4, 178, 52, 238, 170, 216, 203, 241, 250, 9, 79, 87, 82, 66, 65, 181, 8, 105, 82, 120, 72, 227, 149, 180, 196, 77, 200, 171, 151, 229, 8, 179, 200, 87, 255, 100, 110, 210, 23, 202, 209, 207, 136, 200, 236, 181, 198, 43, 149, 224, 160, 43, 9, 122, 158, 109, 198, 65, 35, 134, 249, 138, 240, 112, 12, 142, 49, 102, 28, 39, 255, 9, 243, 201, 180, 65, 88, 130, 179, 200, 129, 146, 196, 20, 202, 40, 25, 203, 25, 34, 26, 40, 64, 225, 42, 29, 13, 245, 52, 105, 91, 152, 104, 58, 163, 240, 246, 41, 4, 80, 103, 151, 167, 216, 175, 127, 118, 240, 255, 168, 85, 190, 168, 215, 169, 204, 48, 149, 42, 188, 81, 184, 129, 188, 222, 71, 121, 126, 168, 82, 160, 10, 180, 41, 36, 119, 101, 99, 232, 156, 231, 145, 248, 88, 15, 134, 248, 173, 44, 21, 16, 49, 8, 45, 162, 189, 40, 6, 111, 127, 10, 204, 147, 66, 219, 180, 159, 168, 190, 9, 171, 136, 102, 202, 11, 57, 75, 206, 237, 187, 139, 187, 220, 250, 115, 74, 12, 70, 136, 163, 120, 45
            ]
        );

        for ((rate, _nr_blocks), expected) in parametrization {
            let mut h = vec![0u8; 5 * rate];
            let mut s = [0u64; 25];
            let mut nr_blocks = _nr_blocks;
            keccak_squeezeblocks(&mut h, &mut nr_blocks, &mut s, rate);
            assert_eq!(h.to_vec(), expected.to_vec());
        }
    }
}
